#!/usr/bin/python3
import socket
import threading
import select
import signal
import sys
import time
import getopt

# Listen
LISTENING_ADDR = '0.0.0.0'
LISTENING_PORT = 8080  # Default port jika tidak ada argumen

# Pass
PASS = ''

# CONST
BUFLEN = 4096 * 4
TIMEOUT = 60
DEFAULT_HOST = '127.0.0.1:109'
RESPONSE = 'HTTP/1.1 101 <b><font color="green">Tunnel-Stores-Premium</font></b>\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: foo\r\n\r\n'

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
        self.threadsLock = threading.Lock()
        self.logLock = threading.Lock()

    def run(self):
        self.soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, int(self.port)))
        self.soc.listen(5)
        self.running = True

        try:
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
                    conn = ConnectionHandler(c, self, addr)
                    conn.start()
                    self.addConn(conn)
                except socket.timeout:
                    continue
        finally:
            self.running = False
            self.soc.close()

    def printLog(self, log):
        with self.logLock:
            print(log)

    def addConn(self, conn):
        with self.threadsLock:
            if self.running:
                self.threads.append(conn)

    def removeConn(self, conn):
        with self.threadsLock:
            self.threads.remove(conn)

    def close(self):
        self.running = False
        with self.threadsLock:
            for c in list(self.threads):
                c.close()


class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = b""
        self.server = server
        self.log = f"Connection: {addr}"

    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except:
            pass
        finally:
            self.clientClosed = True

        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except:
            pass
        finally:
            self.targetClosed = True

    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)

            hostPort = self.findHeader(self.client_buffer.decode(), 'X-Real-Host')
            if not hostPort:
                hostPort = DEFAULT_HOST

            if "X-Split" in self.client_buffer.decode():
                self.client.recv(BUFLEN)

            if hostPort:
                passwd = self.findHeader(self.client_buffer.decode(), 'X-Pass')

                if PASS and passwd == PASS:
                    self.method_CONNECT(hostPort)
                elif PASS and passwd != PASS:
                    self.client.send(b'HTTP/1.1 400 WrongPass!\r\n\r\n')
                elif hostPort.startswith(('127.0.0.1', 'localhost')):
                    self.method_CONNECT(hostPort)
                else:
                    self.client.send(b'HTTP/1.1 403 Forbidden!\r\n\r\n')
            else:
                self.server.printLog('- No X-Real-Host!')
                self.client.send(b'HTTP/1.1 400 NoXRealHost!\r\n\r\n')

        except Exception as e:
            self.log += f' - error: {str(e)}'
            self.server.printLog(self.log)
        finally:
            self.close()
            self.server.removeConn(self)

    def findHeader(self, head, header):
        start = head.find(header + ': ')
        if start == -1:
            return ''
        start += len(header) + 2
        end = head.find('\r\n', start)
        return head[start:end] if end != -1 else ''

    def connect_target(self, host):
        if ':' in host:
            host, port = host.split(':')
            port = int(port)
        else:
            port = 443 if self.method == 'CONNECT' else int(LISTENING_PORT)

        try:
            self.target = socket.create_connection((host, port), timeout=TIMEOUT)
            self.targetClosed = False
        except Exception as e:
            self.server.printLog(f"Failed to connect to target {host}:{port} - {e}")

    def method_CONNECT(self, path):
        self.log += f' - CONNECT {path}'
        self.connect_target(path)
        self.client.sendall(RESPONSE.encode())
        self.client_buffer = b""

        self.server.printLog(self.log)
        self.doCONNECT()

    def doCONNECT(self):
        sockets = [self.client, self.target]
        timeout_counter = 0
        while True:
            try:
                readable, _, error_socks = select.select(sockets, [], sockets, 3)
                if error_socks:
                    break

                for sock in readable:
                    data = sock.recv(BUFLEN)
                    if data:
                        (self.client if sock is self.target else self.target).sendall(data)
                        timeout_counter = 0
                    else:
                        return
            except Exception as e:
                self.server.printLog(f"Connection error: {e}")
                break
            if timeout_counter >= TIMEOUT:
                break


def print_usage():
    print("Usage: proxy.py -p <port>")
    print("       proxy.py -b <bindAddr> -p <port>")
    print("       proxy.py -b 0.0.0.0 -p 80")


def parse_args(argv):
    global LISTENING_ADDR
    global LISTENING_PORT
    
    try:
        opts, _ = getopt.getopt(argv, "hb:p:", ["bind=", "port="])
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt in ("-b", "--bind"):
            LISTENING_ADDR = arg
        elif opt in ("-p", "--port"):
            LISTENING_PORT = int(arg)


def main():
    global LISTENING_PORT

    if len(sys.argv) > 1:
        parse_args(sys.argv[1:])

    print("\n:-------PythonProxy-------:\n")
    print(f"Listening addr: {LISTENING_ADDR}")
    print(f"Listening port: {LISTENING_PORT}\n")
    print(":-------------------------:\n")

    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()

    try:
        while True:
            time.sleep(2)
    except KeyboardInterrupt:
        print("\nStopping...")
        server.close()


if __name__ == '__main__':
    main()
